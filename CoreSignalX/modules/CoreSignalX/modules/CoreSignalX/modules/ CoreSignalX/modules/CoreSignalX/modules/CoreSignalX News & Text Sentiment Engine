"""
sentiment_nlp.py
------------------------------------
CoreSignalX News & Text Sentiment Engine.

Takes a list of headlines or article summaries and
returns:
 - individual sentiment polarity (-1 to +1)
 - aggregate sentiment score (-100 to +100)
"""

from textblob import TextBlob
from typing import List, Dict
import numpy as np


# --------------------------------------------------
#  Core sentiment functions
# --------------------------------------------------
def analyze_headline_sentiment(headline: str) -> float:
    """
    Returns sentiment polarity for a single headline.
    Range: -1.0 (negative) → +1.0 (positive)
    """
    if not headline or not isinstance(headline, str):
        return 0.0
    try:
        blob = TextBlob(headline)
        return blob.sentiment.polarity
    except Exception:
        return 0.0


def aggregate_sentiment(headlines: List[str]) -> Dict[str, float]:
    """
    Given a list of news headlines, compute average sentiment
    and return normalized score (-100 → +100).
    """
    if not headlines:
        return {"sentiment": 0.0, "headline_scores": []}

    scores = [analyze_headline_sentiment(h) for h in headlines]
    avg = np.mean(scores)
    # convert -1→+1 to -100→+100
    normalized = float(np.clip(avg * 100, -100, 100))

    return {"sentiment": normalized, "headline_scores": scores}


# --------------------------------------------------
#  Combined helper
# --------------------------------------------------
def get_latest_news_sentiment(api_key: str, query: str = "stocks") -> Dict[str, float]:
    """
    Wrapper that fetches headlines via data_fetch.get_news_headlines()
    and returns aggregate sentiment.
    """
    try:
        from modules.data_fetch import get_news_headlines
        headlines = get_news_headlines(api_key, query=query)
        return aggregate_sentiment(headlines)
    except Exception as e:
        print(f"[ERROR] sentiment fetch: {e}")
        return {"sentiment": 0.0, "headline_scores": []}


# --------------------------------------------------
#  Test harness
# --------------------------------------------------
if __name__ == "__main__":
    sample = [
        "Markets rally as inflation cools further",
        "Investors fear renewed rate hikes",
        "Tech stocks show strong quarterly earnings",
    ]
    out = aggregate_sentiment(sample)
    print("Average sentiment:", out)
